
counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002984  08002984  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002984  08002984  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002984  08002984  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800298c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002998  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002998  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c56b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211d  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d84  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec25  00000000  00000000  00031dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843dd  00000000  00000000  000409e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4dc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000c4e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002934 	.word	0x08002934

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002934 	.word	0x08002934

0800014c <event_loop>:
uint16_t flags = 0;
uint16_t seconds_counter = 0;
uint32_t cycle_counter = 0;


void event_loop() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  if (flags & FLAG_EVENT_DATA) {
 8000150:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <event_loop+0x44>)
 8000152:	881b      	ldrh	r3, [r3, #0]
 8000154:	f003 0302 	and.w	r3, r3, #2
 8000158:	2b00      	cmp	r3, #0
 800015a:	d008      	beq.n	800016e <event_loop+0x22>
    data_collection_event();
 800015c:	f000 f81a 	bl	8000194 <data_collection_event>
    flags ^= FLAG_EVENT_DATA;
 8000160:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <event_loop+0x44>)
 8000162:	881b      	ldrh	r3, [r3, #0]
 8000164:	f083 0302 	eor.w	r3, r3, #2
 8000168:	b29a      	uxth	r2, r3
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <event_loop+0x44>)
 800016c:	801a      	strh	r2, [r3, #0]
  }
  if (flags & FLAG_EVENT_BASE) {
 800016e:	4b08      	ldr	r3, [pc, #32]	; (8000190 <event_loop+0x44>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	2b00      	cmp	r3, #0
 8000178:	d008      	beq.n	800018c <event_loop+0x40>
    base_clock_event();
 800017a:	f000 f811 	bl	80001a0 <base_clock_event>
    flags ^= FLAG_EVENT_BASE;
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <event_loop+0x44>)
 8000180:	881b      	ldrh	r3, [r3, #0]
 8000182:	f083 0301 	eor.w	r3, r3, #1
 8000186:	b29a      	uxth	r2, r3
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <event_loop+0x44>)
 800018a:	801a      	strh	r2, [r3, #0]
  }
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000028 	.word	0x20000028

08000194 <data_collection_event>:

void data_collection_event() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <base_clock_event>:

void base_clock_event() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  // blink onboard led to show that we are alive
HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001aa:	4807      	ldr	r0, [pc, #28]	; (80001c8 <base_clock_event+0x28>)
 80001ac:	f000 ff1c 	bl	8000fe8 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80001b0:	2005      	movs	r0, #5
 80001b2:	f000 fc63 	bl	8000a7c <HAL_Delay>
HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 80001b6:	2201      	movs	r2, #1
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	4802      	ldr	r0, [pc, #8]	; (80001c8 <base_clock_event+0x28>)
 80001be:	f000 ff13 	bl	8000fe8 <HAL_GPIO_WritePin>
//  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);

}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40011000 	.word	0x40011000

080001cc <base_clock_interrupt_handler>:

void base_clock_interrupt_handler() {
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  ++seconds_counter;
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <base_clock_interrupt_handler+0x4c>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <base_clock_interrupt_handler+0x4c>)
 80001da:	801a      	strh	r2, [r3, #0]
  flags |= FLAG_EVENT_BASE;
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <base_clock_interrupt_handler+0x50>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <base_clock_interrupt_handler+0x50>)
 80001e8:	801a      	strh	r2, [r3, #0]
  if(seconds_counter >= COUNTER_DATA_RATE) {
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <base_clock_interrupt_handler+0x4c>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	2b3b      	cmp	r3, #59	; 0x3b
 80001f0:	d90e      	bls.n	8000210 <base_clock_interrupt_handler+0x44>
    flags |= FLAG_EVENT_DATA;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <base_clock_interrupt_handler+0x50>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <base_clock_interrupt_handler+0x50>)
 80001fe:	801a      	strh	r2, [r3, #0]
    seconds_counter = 0;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <base_clock_interrupt_handler+0x4c>)
 8000202:	2200      	movs	r2, #0
 8000204:	801a      	strh	r2, [r3, #0]
    ++cycle_counter;
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <base_clock_interrupt_handler+0x54>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <base_clock_interrupt_handler+0x54>)
 800020e:	6013      	str	r3, [r2, #0]
  }
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	2000002a 	.word	0x2000002a
 800021c:	20000028 	.word	0x20000028
 8000220:	2000002c 	.word	0x2000002c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fbc6 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f80d 	bl	800024a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f942 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000234:	f000 f866 	bl	8000304 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000238:	f000 f8de 	bl	80003f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800023c:	f000 f912 	bl	8000464 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000240:	f000 f88e 	bl	8000360 <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    event_loop();
 8000244:	f7ff ff82 	bl	800014c <event_loop>
 8000248:	e7fc      	b.n	8000244 <main+0x20>

0800024a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b094      	sub	sp, #80	; 0x50
 800024e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000254:	2228      	movs	r2, #40	; 0x28
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f002 fb63 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800027a:	2309      	movs	r3, #9
 800027c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f829 	bl	80012fc <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002b0:	f000 f9b4 	bl	800061c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2102      	movs	r1, #2
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fa93 	bl	80017fc <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002dc:	f000 f99e 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002e0:	2301      	movs	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fc1f 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f8:	f000 f990 	bl	800061c <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3750      	adds	r7, #80	; 0x50
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_I2C2_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	; (8000358 <MX_I2C2_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_I2C2_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_I2C2_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_I2C2_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_I2C2_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_I2C2_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_I2C2_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_I2C2_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_I2C2_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_I2C2_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_I2C2_Init+0x50>)
 8000342:	f000 fe8b 	bl	800105c <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f966 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000030 	.word	0x20000030
 8000358:	40005800 	.word	0x40005800
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2100      	movs	r1, #0
 800036a:	460a      	mov	r2, r1
 800036c:	801a      	strh	r2, [r3, #0]
 800036e:	460a      	mov	r2, r1
 8000370:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_RTC_Init+0x90>)
 8000378:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <MX_RTC_Init+0x94>)
 800037a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_RTC_Init+0x90>)
 800037e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000382:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_RTC_Init+0x90>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038a:	4819      	ldr	r0, [pc, #100]	; (80003f0 <MX_RTC_Init+0x90>)
 800038c:	f001 fd4a 	bl	8001e24 <HAL_RTC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000396:	f000 f941 	bl	800061c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800039a:	2300      	movs	r3, #0
 800039c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800039e:	2300      	movs	r3, #0
 80003a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	4810      	ldr	r0, [pc, #64]	; (80003f0 <MX_RTC_Init+0x90>)
 80003ae:	f001 fdcf 	bl	8001f50 <HAL_RTC_SetTime>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80003b8:	f000 f930 	bl	800061c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003bc:	2301      	movs	r3, #1
 80003be:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80003c0:	2301      	movs	r3, #1
 80003c2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80003cc:	463b      	mov	r3, r7
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	4807      	ldr	r0, [pc, #28]	; (80003f0 <MX_RTC_Init+0x90>)
 80003d4:	f001 fe54 	bl	8002080 <HAL_RTC_SetDate>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80003de:	f000 f91d 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_SetSecond_IT(&hrtc);
 80003e2:	4803      	ldr	r0, [pc, #12]	; (80003f0 <MX_RTC_Init+0x90>)
 80003e4:	f002 f8ac 	bl	8002540 <HAL_RTCEx_SetSecond_IT>
  /* USER CODE END RTC_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000084 	.word	0x20000084
 80003f4:	40002800 	.word	0x40002800

080003f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_SPI1_Init+0x64>)
 80003fe:	4a18      	ldr	r2, [pc, #96]	; (8000460 <MX_SPI1_Init+0x68>)
 8000400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000402:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_SPI1_Init+0x64>)
 8000404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_SPI1_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_SPI1_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_SPI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_SPI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_SPI1_Init+0x64>)
 8000424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000428:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_SPI1_Init+0x64>)
 800042c:	2228      	movs	r2, #40	; 0x28
 800042e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_SPI1_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_SPI1_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_SPI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_SPI1_Init+0x64>)
 8000444:	220a      	movs	r2, #10
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_SPI1_Init+0x64>)
 800044a:	f002 f8e8 	bl	800261e <HAL_SPI_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000454:	f000 f8e2 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000098 	.word	0x20000098
 8000460:	40013000 	.word	0x40013000

08000464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <MX_USART2_UART_Init+0x50>)
 800046c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_USART2_UART_Init+0x4c>)
 800049c:	f002 f943 	bl	8002726 <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004a6:	f000 f8b9 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000f0 	.word	0x200000f0
 80004b4:	40004400 	.word	0x40004400

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	4b4e      	ldr	r3, [pc, #312]	; (8000608 <MX_GPIO_Init+0x150>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a4d      	ldr	r2, [pc, #308]	; (8000608 <MX_GPIO_Init+0x150>)
 80004d2:	f043 0310 	orr.w	r3, r3, #16
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <MX_GPIO_Init+0x150>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0310 	and.w	r3, r3, #16
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_GPIO_Init+0x150>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a47      	ldr	r2, [pc, #284]	; (8000608 <MX_GPIO_Init+0x150>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b45      	ldr	r3, [pc, #276]	; (8000608 <MX_GPIO_Init+0x150>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b42      	ldr	r3, [pc, #264]	; (8000608 <MX_GPIO_Init+0x150>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a41      	ldr	r2, [pc, #260]	; (8000608 <MX_GPIO_Init+0x150>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <MX_GPIO_Init+0x150>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <MX_GPIO_Init+0x150>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a3b      	ldr	r2, [pc, #236]	; (8000608 <MX_GPIO_Init+0x150>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b39      	ldr	r3, [pc, #228]	; (8000608 <MX_GPIO_Init+0x150>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4836      	ldr	r0, [pc, #216]	; (800060c <MX_GPIO_Init+0x154>)
 8000534:	f000 fd58 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AT25_CS_GPIO_Port, AT25_CS_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	4834      	ldr	r0, [pc, #208]	; (8000610 <MX_GPIO_Init+0x158>)
 800053e:	f000 fd53 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	482c      	ldr	r0, [pc, #176]	; (800060c <MX_GPIO_Init+0x154>)
 800055c:	f000 fbc0 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8000560:	f640 7303 	movw	r3, #3843	; 0xf03
 8000564:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x15c>)
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4828      	ldr	r0, [pc, #160]	; (8000618 <MX_GPIO_Init+0x160>)
 8000576:	f000 fbb3 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AT25_CS_Pin */
  GPIO_InitStruct.Pin = AT25_CS_Pin;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2302      	movs	r3, #2
 8000588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AT25_CS_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4619      	mov	r1, r3
 8000590:	481f      	ldr	r0, [pc, #124]	; (8000610 <MX_GPIO_Init+0x158>)
 8000592:	f000 fba5 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000596:	23fc      	movs	r3, #252	; 0xfc
 8000598:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_GPIO_Init+0x15c>)
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <MX_GPIO_Init+0x158>)
 80005aa:	f000 fb99 	bl	8000ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2008      	movs	r0, #8
 80005b4:	f000 fb5d 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005b8:	2008      	movs	r0, #8
 80005ba:	f000 fb76 	bl	8000caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f000 fb55 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005c8:	2009      	movs	r0, #9
 80005ca:	f000 fb6e 	bl	8000caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fb4d 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 fb66 	bl	8000caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2017      	movs	r0, #23
 80005e4:	f000 fb45 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005e8:	2017      	movs	r0, #23
 80005ea:	f000 fb5e 	bl	8000caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2028      	movs	r0, #40	; 0x28
 80005f4:	f000 fb3d 	bl	8000c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f8:	2028      	movs	r0, #40	; 0x28
 80005fa:	f000 fb56 	bl	8000caa <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40011000 	.word	0x40011000
 8000610:	40010c00 	.word	0x40010c00
 8000614:	10110000 	.word	0x10110000
 8000618:	40010800 	.word	0x40010800

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <HAL_MspInit+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x5c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_MspInit+0x60>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_MspInit+0x60>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_I2C_MspInit+0x74>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d124      	bne.n	80006f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <HAL_I2C_MspInit+0x7c>)
 80006da:	f000 fb01 	bl	8000ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_I2C_MspInit+0x78>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40005800 	.word	0x40005800
 8000704:	40021000 	.word	0x40021000
 8000708:	40010c00 	.word	0x40010c00

0800070c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <HAL_RTC_MspInit+0x4c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d118      	bne.n	8000750 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800071e:	f000 fde1 	bl	80012e4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_RTC_MspInit+0x50>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <HAL_RTC_MspInit+0x50>)
 8000728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_RTC_MspInit+0x50>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_RTC_MspInit+0x54>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2003      	movs	r0, #3
 8000746:	f000 fa94 	bl	8000c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800074a:	2003      	movs	r0, #3
 800074c:	f000 faad 	bl	8000caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40002800 	.word	0x40002800
 800075c:	40021000 	.word	0x40021000
 8000760:	4242043c 	.word	0x4242043c

08000764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_SPI_MspInit+0x88>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d12f      	bne.n	80007e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 800078a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_SPI_MspInit+0x8c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <HAL_SPI_MspInit+0x90>)
 80007c8:	f000 fa8a 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_SPI_MspInit+0x90>)
 80007e0:	f000 fa7e 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40013000 	.word	0x40013000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010800 	.word	0x40010800

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d12f      	bne.n	8000878 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_UART_MspInit+0x8c>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_UART_MspInit+0x8c>)
 800081e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000822:	61d3      	str	r3, [r2, #28]
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_UART_MspInit+0x8c>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_UART_MspInit+0x8c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <HAL_UART_MspInit+0x8c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_MspInit+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_UART_MspInit+0x90>)
 800085c:	f000 fa40 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000860:	2308      	movs	r3, #8
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_UART_MspInit+0x90>)
 8000874:	f000 fa34 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 f8b7 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <RTC_IRQHandler+0x14>)
 80008e2:	f001 fe56 	bl	8002592 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  base_clock_interrupt_handler();
 80008e6:	f7ff fc71 	bl	80001cc <base_clock_interrupt_handler>
  /* USER CODE END RTC_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000084 	.word	0x20000084

080008f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f000 fb8d 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000906:	2008      	movs	r0, #8
 8000908:	f000 fb86 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000914:	2010      	movs	r0, #16
 8000916:	f000 fb7f 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000922:	2020      	movs	r0, #32
 8000924:	f000 fb78 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000928:	2040      	movs	r0, #64	; 0x40
 800092a:	f000 fb75 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800092e:	2080      	movs	r0, #128	; 0x80
 8000930:	f000 fb72 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000934:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000938:	f000 fb6e 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800093c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000940:	f000 fb6a 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800094c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000950:	f000 fb62 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000954:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000958:	f000 fb5e 	bl	8001018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800096c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800096e:	e003      	b.n	8000978 <LoopCopyDataInit>

08000970 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000972:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000974:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000976:	3104      	adds	r1, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000978:	480a      	ldr	r0, [pc, #40]	; (80009a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800097c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800097e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000980:	d3f6      	bcc.n	8000970 <CopyDataInit>
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000984:	e002      	b.n	800098c <LoopFillZerobss>

08000986 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000988:	f842 3b04 	str.w	r3, [r2], #4

0800098c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800098e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000990:	d3f9      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000992:	f7ff ffe5 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 ffa1 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fc43 	bl	8000224 <main>
  bx lr
 800099e:	4770      	bx	lr
  ldr r3, =_sidata
 80009a0:	0800298c 	.word	0x0800298c
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009b0:	20000134 	.word	0x20000134

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x28>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f947 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fe28 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f95f 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 f927 	bl	8000c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_IncTick+0x20>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000130 	.word	0x20000130

08000a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000130 	.word	0x20000130

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4906      	ldr	r1, [pc, #24]	; (8000b5c <__NVIC_EnableIRQ+0x34>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f7ff ff90 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff2d 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff42 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff90 	bl	8000bb4 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5f 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff35 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa2 	bl	8000c18 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e169      	b.n	8000fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8158 	bne.w	8000fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	4a9a      	ldr	r2, [pc, #616]	; (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d05e      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d1c:	4a98      	ldr	r2, [pc, #608]	; (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d875      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d22:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d058      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d28:	4a96      	ldr	r2, [pc, #600]	; (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d86f      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d2e:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d052      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d34:	4a94      	ldr	r2, [pc, #592]	; (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d869      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d3a:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d04c      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d40:	4a92      	ldr	r2, [pc, #584]	; (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d863      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d46:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d046      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d4c:	4a90      	ldr	r2, [pc, #576]	; (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d85d      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d52:	2b12      	cmp	r3, #18
 8000d54:	d82a      	bhi.n	8000dac <HAL_GPIO_Init+0xcc>
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d859      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HAL_GPIO_Init+0x80>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000ddb 	.word	0x08000ddb
 8000d64:	08000db5 	.word	0x08000db5
 8000d68:	08000dc7 	.word	0x08000dc7
 8000d6c:	08000e09 	.word	0x08000e09
 8000d70:	08000e0f 	.word	0x08000e0f
 8000d74:	08000e0f 	.word	0x08000e0f
 8000d78:	08000e0f 	.word	0x08000e0f
 8000d7c:	08000e0f 	.word	0x08000e0f
 8000d80:	08000e0f 	.word	0x08000e0f
 8000d84:	08000e0f 	.word	0x08000e0f
 8000d88:	08000e0f 	.word	0x08000e0f
 8000d8c:	08000e0f 	.word	0x08000e0f
 8000d90:	08000e0f 	.word	0x08000e0f
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000e0f 	.word	0x08000e0f
 8000d9c:	08000e0f 	.word	0x08000e0f
 8000da0:	08000e0f 	.word	0x08000e0f
 8000da4:	08000dbd 	.word	0x08000dbd
 8000da8:	08000dd1 	.word	0x08000dd1
 8000dac:	4a79      	ldr	r2, [pc, #484]	; (8000f94 <HAL_GPIO_Init+0x2b4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db2:	e02c      	b.n	8000e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e029      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e024      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e01f      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e01a      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de2:	2304      	movs	r3, #4
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e013      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	611a      	str	r2, [r3, #16]
          break;
 8000dfa:	e009      	b.n	8000e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	615a      	str	r2, [r3, #20]
          break;
 8000e06:	e003      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          break;
 8000e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2bff      	cmp	r3, #255	; 0xff
 8000e14:	d801      	bhi.n	8000e1a <HAL_GPIO_Init+0x13a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	e001      	b.n	8000e1e <HAL_GPIO_Init+0x13e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d802      	bhi.n	8000e2c <HAL_GPIO_Init+0x14c>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x152>
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	3b08      	subs	r3, #8
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	210f      	movs	r1, #15
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	6a39      	ldr	r1, [r7, #32]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80b1 	beq.w	8000fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <HAL_GPIO_Init+0x2c0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <HAL_GPIO_Init+0x2c4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3e      	ldr	r2, [pc, #248]	; (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1e0>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	492f      	ldr	r1, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	492c      	ldr	r1, [pc, #176]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4922      	ldr	r1, [pc, #136]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	491e      	ldr	r1, [pc, #120]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	4918      	ldr	r1, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4914      	ldr	r1, [pc, #80]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
 8000f7c:	e021      	b.n	8000fc2 <HAL_GPIO_Init+0x2e2>
 8000f7e:	bf00      	nop
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10310000 	.word	0x10310000
 8000f88:	10220000 	.word	0x10220000
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10120000 	.word	0x10120000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f47f ae8e 	bne.w	8000cf4 <HAL_GPIO_Init+0x14>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	372c      	adds	r7, #44	; 0x2c
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f806 	bl	8001048 <HAL_GPIO_EXTI_Callback>
  }
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e12b      	b.n	80012c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fb02 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010c0:	f000 fcf0 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a81      	ldr	r2, [pc, #516]	; (80012d0 <HAL_I2C_Init+0x274>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d807      	bhi.n	80010e0 <HAL_I2C_Init+0x84>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a80      	ldr	r2, [pc, #512]	; (80012d4 <HAL_I2C_Init+0x278>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	bf94      	ite	ls
 80010d8:	2301      	movls	r3, #1
 80010da:	2300      	movhi	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e006      	b.n	80010ee <HAL_I2C_Init+0x92>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a7d      	ldr	r2, [pc, #500]	; (80012d8 <HAL_I2C_Init+0x27c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	bf94      	ite	ls
 80010e8:	2301      	movls	r3, #1
 80010ea:	2300      	movhi	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0e7      	b.n	80012c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4a78      	ldr	r2, [pc, #480]	; (80012dc <HAL_I2C_Init+0x280>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <HAL_I2C_Init+0x274>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d802      	bhi.n	8001130 <HAL_I2C_Init+0xd4>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3301      	adds	r3, #1
 800112e:	e009      	b.n	8001144 <HAL_I2C_Init+0xe8>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a69      	ldr	r2, [pc, #420]	; (80012e0 <HAL_I2C_Init+0x284>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	099b      	lsrs	r3, r3, #6
 8001142:	3301      	adds	r3, #1
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	430b      	orrs	r3, r1
 800114a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	495c      	ldr	r1, [pc, #368]	; (80012d0 <HAL_I2C_Init+0x274>)
 8001160:	428b      	cmp	r3, r1
 8001162:	d819      	bhi.n	8001198 <HAL_I2C_Init+0x13c>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1e59      	subs	r1, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001178:	400b      	ands	r3, r1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <HAL_I2C_Init+0x138>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1e59      	subs	r1, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fbb1 f3f3 	udiv	r3, r1, r3
 800118c:	3301      	adds	r3, #1
 800118e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001192:	e051      	b.n	8001238 <HAL_I2C_Init+0x1dc>
 8001194:	2304      	movs	r3, #4
 8001196:	e04f      	b.n	8001238 <HAL_I2C_Init+0x1dc>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d111      	bne.n	80011c4 <HAL_I2C_Init+0x168>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	440b      	add	r3, r1
 80011ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	e012      	b.n	80011ea <HAL_I2C_Init+0x18e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1e58      	subs	r0, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	0099      	lsls	r1, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_Init+0x196>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e022      	b.n	8001238 <HAL_I2C_Init+0x1dc>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10e      	bne.n	8001218 <HAL_I2C_Init+0x1bc>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1e58      	subs	r0, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	440b      	add	r3, r1
 8001208:	fbb0 f3f3 	udiv	r3, r0, r3
 800120c:	3301      	adds	r3, #1
 800120e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001216:	e00f      	b.n	8001238 <HAL_I2C_Init+0x1dc>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e58      	subs	r0, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	0099      	lsls	r1, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	fbb0 f3f3 	udiv	r3, r0, r3
 800122e:	3301      	adds	r3, #1
 8001230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	6809      	ldr	r1, [r1, #0]
 800123c:	4313      	orrs	r3, r2
 800123e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6911      	ldr	r1, [r2, #16]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68d2      	ldr	r2, [r2, #12]
 8001272:	4311      	orrs	r1, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	430b      	orrs	r3, r1
 800127a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2220      	movs	r2, #32
 80012b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	000186a0 	.word	0x000186a0
 80012d4:	001e847f 	.word	0x001e847f
 80012d8:	003d08ff 	.word	0x003d08ff
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	10624dd3 	.word	0x10624dd3

080012e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	420e0020 	.word	0x420e0020

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e26c      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8087 	beq.w	800142a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b04      	cmp	r3, #4
 8001326:	d00c      	beq.n	8001342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001328:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	d112      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d10b      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06c      	beq.n	8001428 <HAL_RCC_OscConfig+0x12c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d168      	bne.n	8001428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e246      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x76>
 8001364:	4b80      	ldr	r3, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a7f      	ldr	r2, [pc, #508]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e02e      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b78      	ldr	r3, [pc, #480]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0xbc>
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a71      	ldr	r2, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6f      	ldr	r3, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a67      	ldr	r2, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb46 	bl	8000a68 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fb42 	bl	8000a68 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1fa      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe4>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb32 	bl	8000a68 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fb2e 	bl	8000a68 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1e6      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x10c>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d063      	beq.n	80014fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1ba      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4939      	ldr	r1, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e03a      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x270>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fae7 	bl	8000a68 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fae3 	bl	8000a68 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e19b      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x270>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fac6 	bl	8000a68 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fac2 	bl	8000a68 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e17a      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03a      	beq.n	8001580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d019      	beq.n	8001546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff faa6 	bl	8000a68 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff faa2 	bl	8000a68 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e15a      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f000 fad8 	bl	8001af4 <RCC_Delay>
 8001544:	e01c      	b.n	8001580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fa8c 	bl	8000a68 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e00f      	b.n	8001574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fa88 	bl	8000a68 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d908      	bls.n	8001574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e140      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	42420000 	.word	0x42420000
 8001570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e9      	bne.n	8001554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a6 	beq.w	80016da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b97      	ldr	r3, [pc, #604]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b94      	ldr	r3, [pc, #592]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a93      	ldr	r2, [pc, #588]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b91      	ldr	r3, [pc, #580]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a8a      	ldr	r2, [pc, #552]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa49 	bl	8000a68 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7ff fa45 	bl	8000a68 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0fd      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x312>
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a7a      	ldr	r2, [pc, #488]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	e02d      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x334>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a72      	ldr	r2, [pc, #456]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x356>
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a66      	ldr	r2, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a63      	ldr	r2, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff f9f9 	bl	8000a68 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff f9f5 	bl	8000a68 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0ab      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x37e>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff f9e3 	bl	8000a68 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff f9df 	bl	8000a68 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e095      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8081 	beq.w	80017e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d061      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d146      	bne.n	8001786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff f9b3 	bl	8000a68 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f9af 	bl	8000a68 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e067      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d108      	bne.n	8001740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	492d      	ldr	r1, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	430b      	orrs	r3, r1
 8001752:	4927      	ldr	r1, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff f983 	bl	8000a68 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff f97f 	bl	8000a68 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e037      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x46a>
 8001784:	e02f      	b.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_RCC_OscConfig+0x4fc>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff f96c 	bl	8000a68 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f968 	bl	8000a68 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e020      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x498>
 80017b2:	e018      	b.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	42420060 	.word	0x42420060

080017fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0d0      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d910      	bls.n	8001840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4965      	ldr	r1, [pc, #404]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b8      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800187a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	494d      	ldr	r1, [pc, #308]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d040      	beq.n	800191c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d115      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e073      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06b      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4936      	ldr	r1, [pc, #216]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ec:	f7ff f8bc 	bl	8000a68 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff f8b8 	bl	8000a68 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e053      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d210      	bcs.n	800194c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e032      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198a:	f000 f821 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	490a      	ldr	r1, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1cc>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f81a 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	0800296c 	.word	0x0800296c
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	b490      	push	{r4, r7}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d8:	1d3c      	adds	r4, r7, #4
 80019da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019e0:	f240 2301 	movw	r3, #513	; 0x201
 80019e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x46>
 8001a0e:	e02d      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a12:	623b      	str	r3, [r7, #32]
      break;
 8001a14:	e02d      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a22:	4413      	add	r3, r2
 8001a24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c5b      	lsrs	r3, r3, #17
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a42:	4413      	add	r3, r2
 8001a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4e:	fb02 f203 	mul.w	r2, r2, r3
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	e004      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	623b      	str	r3, [r7, #32]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	623b      	str	r3, [r7, #32]
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc90      	pop	{r4, r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	0800294c 	.word	0x0800294c
 8001a84:	40021000 	.word	0x40021000
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	003d0900 	.word	0x003d0900

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff2 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	0800297c 	.word	0x0800297c

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0adb      	lsrs	r3, r3, #11
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	0800297c 	.word	0x0800297c

08001af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <RCC_Delay+0x34>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <RCC_Delay+0x38>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b10:	bf00      	nop
  }
  while (Delay --);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <RCC_Delay+0x1c>
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	10624dd3 	.word	0x10624dd3

08001b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d07d      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10d      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	61d3      	str	r3, [r2, #28]
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a42      	ldr	r2, [pc, #264]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b90:	f7fe ff6a 	bl	8000a68 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	e008      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b98:	f7fe ff66 	bl	8000a68 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e06d      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d02e      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d027      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d014      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7fe ff35 	bl	8000a68 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff31 	bl	8000a68 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e036      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4917      	ldr	r1, [pc, #92]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	490b      	ldr	r1, [pc, #44]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4904      	ldr	r1, [pc, #16]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	42420440 	.word	0x42420440

08001c9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b08d      	sub	sp, #52	; 0x34
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca4:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001ca6:	f107 040c 	add.w	r4, r7, #12
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb0:	f240 2301 	movw	r3, #513	; 0x201
 8001cb4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	f200 8091 	bhi.w	8001dfa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d04c      	beq.n	8001d78 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d07c      	beq.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001ce4:	e089      	b.n	8001dfa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8082 	beq.w	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d0c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d018      	beq.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c5b      	lsrs	r3, r3, #17
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d26:	4413      	add	r3, r2
 8001d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00d      	beq.n	8001d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d38:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d48:	e004      	b.n	8001d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d60:	d102      	bne.n	8001d68 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d66:	e04a      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d76:	e042      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d88:	d108      	bne.n	8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9a:	e01f      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da6:	d109      	bne.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001db4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dba:	e00f      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dc6:	d11c      	bne.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001dd4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dda:	e012      	b.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001ddc:	e011      	b.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001dde:	f7ff fe75 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0b9b      	lsrs	r3, r3, #14
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001df8:	e004      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e002      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e000      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001e02:	bf00      	nop
    }
  }
  return (frequency);
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3734      	adds	r7, #52	; 0x34
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800295c 	.word	0x0800295c
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	003d0900 	.word	0x003d0900
 8001e20:	aaaaaaab 	.word	0xaaaaaaab

08001e24 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e084      	b.n	8001f44 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7c5b      	ldrb	r3, [r3, #17]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fc5e 	bl	800070c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f9c8 	bl	80021ec <HAL_RTC_WaitForSynchro>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e06b      	b.n	8001f44 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa81 	bl	8002374 <RTC_EnterInitMode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e060      	b.n	8001f44 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0207 	bic.w	r2, r2, #7
 8001e90:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RTC_Init+0x128>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_RTC_Init+0x128>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RTC_Init+0x128>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4926      	ldr	r1, [pc, #152]	; (8001f4c <HAL_RTC_Init+0x128>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec0:	d003      	beq.n	8001eca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff fee6 	bl	8001c9c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ed0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2204      	movs	r2, #4
 8001edc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e030      	b.n	8001f44 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 010f 	bic.w	r1, r3, #15
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0c1a      	lsrs	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	b291      	uxth	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fa55 	bl	80023c4 <RTC_ExitInitMode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00c      	b.n	8001f44 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40006c00 	.word	0x40006c00

08001f50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_RTC_SetTime+0x20>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e080      	b.n	8002076 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	7c1b      	ldrb	r3, [r3, #16]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_RTC_SetTime+0x30>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e07a      	b.n	8002076 <HAL_RTC_SetTime+0x126>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d113      	bne.n	8001fba <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f9c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a5b      	subs	r3, r3, r1
 8001fac:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fae:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e01e      	b.n	8001ff8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fa28 	bl	8002414 <RTC_Bcd2ToByte>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001fcc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	785b      	ldrb	r3, [r3, #1]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fa1d 	bl	8002414 <RTC_Bcd2ToByte>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fe6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	789b      	ldrb	r3, [r3, #2]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa11 	bl	8002414 <RTC_Bcd2ToByte>
 8001ff2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ff4:	4423      	add	r3, r4
 8001ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f953 	bl	80022a6 <RTC_WriteTimeCounter>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2204      	movs	r2, #4
 800200a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e02f      	b.n	8002076 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0205 	bic.w	r2, r2, #5
 8002024:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f964 	bl	80022f4 <RTC_ReadAlarmCounter>
 800202c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002034:	d018      	beq.n	8002068 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d214      	bcs.n	8002068 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002044:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002048:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f96a 	bl	8002326 <RTC_WriteAlarmCounter>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2204      	movs	r2, #4
 800205c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e006      	b.n	8002076 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
	...

08002080 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_RTC_SetDate+0x24>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e097      	b.n	80021d8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	7c1b      	ldrb	r3, [r3, #16]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_RTC_SetDate+0x34>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e091      	b.n	80021d8 <HAL_RTC_SetDate+0x158>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	78da      	ldrb	r2, [r3, #3]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785a      	ldrb	r2, [r3, #1]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	789a      	ldrb	r2, [r3, #2]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	739a      	strb	r2, [r3, #14]
 80020de:	e01a      	b.n	8002116 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	78db      	ldrb	r3, [r3, #3]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f995 	bl	8002414 <RTC_Bcd2ToByte>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f98c 	bl	8002414 <RTC_Bcd2ToByte>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f983 	bl	8002414 <RTC_Bcd2ToByte>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	7bdb      	ldrb	r3, [r3, #15]
 800211a:	4618      	mov	r0, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	7b59      	ldrb	r1, [r3, #13]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	7b9b      	ldrb	r3, [r3, #14]
 8002124:	461a      	mov	r2, r3
 8002126:	f000 f993 	bl	8002450 <RTC_WeekDayNum>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	7b1a      	ldrb	r2, [r3, #12]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f883 	bl	8002246 <RTC_ReadTimeCounter>
 8002140:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <HAL_RTC_SetDate+0x160>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0adb      	lsrs	r3, r3, #11
 800214c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b18      	cmp	r3, #24
 8002152:	d93a      	bls.n	80021ca <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_RTC_SetDate+0x164>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_RTC_SetDate+0x168>)
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800216a:	69f9      	ldr	r1, [r7, #28]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f89a 	bl	80022a6 <RTC_WriteTimeCounter>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2204      	movs	r2, #4
 800217c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e027      	b.n	80021d8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f8b3 	bl	80022f4 <RTC_ReadAlarmCounter>
 800218e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002196:	d018      	beq.n	80021ca <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	d214      	bcs.n	80021ca <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80021a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021aa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021ac:	69b9      	ldr	r1, [r7, #24]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8b9 	bl	8002326 <RTC_WriteAlarmCounter>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2204      	movs	r2, #4
 80021be:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e006      	b.n	80021d8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	91a2b3c5 	.word	0x91a2b3c5
 80021e4:	aaaaaaab 	.word	0xaaaaaaab
 80021e8:	00015180 	.word	0x00015180

080021ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e01d      	b.n	800223e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0208 	bic.w	r2, r2, #8
 8002210:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002212:	f7fe fc29 	bl	8000a68 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002218:	e009      	b.n	800222e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800221a:	f7fe fc25 	bl	8000a68 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002228:	d901      	bls.n	800222e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e007      	b.n	800223e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	827b      	strh	r3, [r7, #18]
 8002252:	2300      	movs	r3, #0
 8002254:	823b      	strh	r3, [r7, #16]
 8002256:	2300      	movs	r3, #0
 8002258:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002276:	8a7a      	ldrh	r2, [r7, #18]
 8002278:	8a3b      	ldrh	r3, [r7, #16]
 800227a:	429a      	cmp	r2, r3
 800227c:	d008      	beq.n	8002290 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800227e:	8a3b      	ldrh	r3, [r7, #16]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e004      	b.n	800229a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002290:	8a7b      	ldrh	r3, [r7, #18]
 8002292:	041a      	lsls	r2, r3, #16
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800229a:	697b      	ldr	r3, [r7, #20]
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f85d 	bl	8002374 <RTC_EnterInitMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e011      	b.n	80022ea <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	0c12      	lsrs	r2, r2, #16
 80022ce:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b292      	uxth	r2, r2
 80022d8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f872 	bl	80023c4 <RTC_ExitInitMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	81fb      	strh	r3, [r7, #14]
 8002300:	2300      	movs	r3, #0
 8002302:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	89bb      	ldrh	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f81d 	bl	8002374 <RTC_EnterInitMode>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e011      	b.n	800236a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	0c12      	lsrs	r2, r2, #16
 800234e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b292      	uxth	r2, r2
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f832 	bl	80023c4 <RTC_ExitInitMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002380:	f7fe fb72 	bl	8000a68 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002386:	e009      	b.n	800239c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002388:	f7fe fb6e 	bl	8000a68 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002396:	d901      	bls.n	800239c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e00f      	b.n	80023bc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ee      	beq.n	8002388 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0210 	orr.w	r2, r2, #16
 80023b8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0210 	bic.w	r2, r2, #16
 80023de:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80023e0:	f7fe fb42 	bl	8000a68 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023e6:	e009      	b.n	80023fc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023e8:	f7fe fb3e 	bl	8000a68 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f6:	d901      	bls.n	80023fc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e007      	b.n	800240c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ee      	beq.n	80023e8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4413      	add	r3, r2
 8002442:	b2db      	uxtb	r3, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
	...

08002450 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800246e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d82d      	bhi.n	80024d2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <RTC_WeekDayNum+0xe4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	085a      	lsrs	r2, r3, #1
 800248a:	78bb      	ldrb	r3, [r7, #2]
 800248c:	441a      	add	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	441a      	add	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	4926      	ldr	r1, [pc, #152]	; (8002538 <RTC_WeekDayNum+0xe8>)
 80024a0:	fba1 1303 	umull	r1, r3, r1, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4922      	ldr	r1, [pc, #136]	; (8002538 <RTC_WeekDayNum+0xe8>)
 80024ae:	fba1 1303 	umull	r1, r3, r1, r3
 80024b2:	09db      	lsrs	r3, r3, #7
 80024b4:	4413      	add	r3, r2
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <RTC_WeekDayNum+0xec>)
 80024ba:	fba3 1302 	umull	r1, r3, r3, r2
 80024be:	1ad1      	subs	r1, r2, r3
 80024c0:	0849      	lsrs	r1, r1, #1
 80024c2:	440b      	add	r3, r1
 80024c4:	0899      	lsrs	r1, r3, #2
 80024c6:	460b      	mov	r3, r1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a5b      	subs	r3, r3, r1
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e029      	b.n	8002526 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <RTC_WeekDayNum+0xe4>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	085a      	lsrs	r2, r3, #1
 80024e6:	78bb      	ldrb	r3, [r7, #2]
 80024e8:	441a      	add	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	441a      	add	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4910      	ldr	r1, [pc, #64]	; (8002538 <RTC_WeekDayNum+0xe8>)
 80024f8:	fba1 1303 	umull	r1, r3, r1, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <RTC_WeekDayNum+0xe8>)
 8002504:	fba1 1303 	umull	r1, r3, r1, r3
 8002508:	09db      	lsrs	r3, r3, #7
 800250a:	4413      	add	r3, r2
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <RTC_WeekDayNum+0xec>)
 8002510:	fba3 1302 	umull	r1, r3, r3, r2
 8002514:	1ad1      	subs	r1, r2, r3
 8002516:	0849      	lsrs	r1, r1, #1
 8002518:	440b      	add	r3, r1
 800251a:	0899      	lsrs	r1, r3, #2
 800251c:	460b      	mov	r3, r1
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a5b      	subs	r3, r3, r1
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b2db      	uxtb	r3, r3
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	38e38e39 	.word	0x38e38e39
 8002538:	51eb851f 	.word	0x51eb851f
 800253c:	24924925 	.word	0x24924925

08002540 <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01a      	b.n	8002588 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7c1b      	ldrb	r3, [r3, #16]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RTCEx_SetSecond_IT+0x1e>
 800255a:	2302      	movs	r3, #2
 800255c:	e014      	b.n	8002588 <HAL_RTCEx_SetSecond_IT+0x48>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d024      	beq.n	80025f2 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01d      	beq.n	80025f2 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f821 	bl	800260c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0204 	mvn.w	r2, #4
 80025d2:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	745a      	strb	r2, [r3, #17]
 80025da:	e005      	b.n	80025e8 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f80c 	bl	80025fa <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0201 	mvn.w	r2, #1
 80025f0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e076      	b.n	800271e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002640:	d009      	beq.n	8002656 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
 8002648:	e005      	b.n	8002656 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe f877 	bl	8000764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	ea42 0103 	orr.w	r1, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	0c1a      	lsrs	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f002 0204 	and.w	r2, r2, #4
 80026fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e03f      	b.n	80027b8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fe f853 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2224      	movs	r2, #36	; 0x24
 8002756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002768:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f828 	bl	80027c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800279e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	430b      	orrs	r3, r1
 8002806:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <UART_SetConfig+0x114>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002828:	f7ff f950 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	e002      	b.n	8002836 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002830:	f7ff f938 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8002834:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <UART_SetConfig+0x118>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	0119      	lsls	r1, r3, #4
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fbb2 f2f3 	udiv	r2, r2, r3
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <UART_SetConfig+0x118>)
 800286e:	fba3 0302 	umull	r0, r3, r3, r2
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2064      	movs	r0, #100	; 0x64
 8002876:	fb00 f303 	mul.w	r3, r0, r3
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <UART_SetConfig+0x118>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	4419      	add	r1, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <UART_SetConfig+0x118>)
 80028a6:	fba3 0302 	umull	r0, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2064      	movs	r0, #100	; 0x64
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	3332      	adds	r3, #50	; 0x32
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <UART_SetConfig+0x118>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	440a      	add	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	2600      	movs	r6, #0
 80028e0:	4d0c      	ldr	r5, [pc, #48]	; (8002914 <__libc_init_array+0x38>)
 80028e2:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e4:	1b64      	subs	r4, r4, r5
 80028e6:	10a4      	asrs	r4, r4, #2
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	f000 f822 	bl	8002934 <_init>
 80028f0:	2600      	movs	r6, #0
 80028f2:	4d0a      	ldr	r5, [pc, #40]	; (800291c <__libc_init_array+0x40>)
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <__libc_init_array+0x44>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	08002984 	.word	0x08002984
 8002918:	08002984 	.word	0x08002984
 800291c:	08002984 	.word	0x08002984
 8002920:	08002988 	.word	0x08002988

08002924 <memset>:
 8002924:	4603      	mov	r3, r0
 8002926:	4402      	add	r2, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
